#include <iostream>
#include <unistd.h>
#include <sstream>
#include "bus.hpp"

#include "display/text_40x24.hpp"
#include "devices/keyboard.hpp"
#include "display/hgr_280x192.hpp"
/**
 * Process read and write to simulated IO bus for peripherals 
 * All external bus accesses are 8-bit data, 16-bit address.
 * So that is the interface here.
 *
 * */


// Table of memory read handlers
memory_read_handler C0xx_memory_read_handlers[] = {
    /* 0xC000 */ nullptr,
    /* 0xC001 */ nullptr,
    /* 0xC002 */ nullptr,
    /* 0xC003 */ nullptr,
    /* 0xC004 */ nullptr,
    /* 0xC005 */ nullptr,
    /* 0xC006 */ nullptr,
    /* 0xC007 */ nullptr,
    /* 0xC008 */ nullptr,
    /* 0xC009 */ nullptr,
    /* 0xC00A */ nullptr,
    /* 0xC00B */ nullptr,
    /* 0xC00C */ nullptr,
    /* 0xC00D */ nullptr,
    /* 0xC00E */ nullptr,
    /* 0xC00F */ nullptr,
    /* 0xC010 */ nullptr,
    /* 0xC011 */ nullptr,
    /* 0xC012 */ nullptr,
    /* 0xC013 */ nullptr,
    /* 0xC014 */ nullptr,
    /* 0xC015 */ nullptr,
    /* 0xC016 */ nullptr,
    /* 0xC017 */ nullptr,
    /* 0xC018 */ nullptr,
    /* 0xC019 */ nullptr,
    /* 0xC01A */ nullptr,
    /* 0xC01B */ nullptr,
    /* 0xC01C */ nullptr,
    /* 0xC01D */ nullptr,
    /* 0xC01E */ nullptr,
    /* 0xC01F */ nullptr,
    /* 0xC020 */ nullptr,
    /* 0xC021 */ nullptr,
    /* 0xC022 */ nullptr,
    /* 0xC023 */ nullptr,
    /* 0xC024 */ nullptr,
    /* 0xC025 */ nullptr,
    /* 0xC026 */ nullptr,
    /* 0xC027 */ nullptr,
    /* 0xC028 */ nullptr,
    /* 0xC029 */ nullptr,
    /* 0xC02A */ nullptr,
    /* 0xC02B */ nullptr,
    /* 0xC02C */ nullptr,
    /* 0xC02D */ nullptr,
    /* 0xC02E */ nullptr,
    /* 0xC02F */ nullptr,
    /* 0xC030 */ nullptr,
    /* 0xC031 */ nullptr,
    /* 0xC032 */ nullptr,
    /* 0xC033 */ nullptr,
    /* 0xC034 */ nullptr,
    /* 0xC035 */ nullptr,
    /* 0xC036 */ nullptr,
    /* 0xC037 */ nullptr,
    /* 0xC038 */ nullptr,
    /* 0xC039 */ nullptr,
    /* 0xC03A */ nullptr,
    /* 0xC03B */ nullptr,
    /* 0xC03C */ nullptr,
    /* 0xC03D */ nullptr,
    /* 0xC03E */ nullptr,
    /* 0xC03F */ nullptr,
    /* 0xC040 */ nullptr,
    /* 0xC041 */ nullptr,
    /* 0xC042 */ nullptr,
    /* 0xC043 */ nullptr,
    /* 0xC044 */ nullptr,
    /* 0xC045 */ nullptr,
    /* 0xC046 */ nullptr,
    /* 0xC047 */ nullptr,
    /* 0xC048 */ nullptr,
    /* 0xC049 */ nullptr,
    /* 0xC04A */ nullptr,
    /* 0xC04B */ nullptr,
    /* 0xC04C */ nullptr,
    /* 0xC04D */ nullptr,
    /* 0xC04E */ nullptr,
    /* 0xC04F */ nullptr,
    /* 0xC050 */ nullptr,
    /* 0xC051 */ nullptr,
    /* 0xC052 */ nullptr,
    /* 0xC053 */ nullptr,
    /* 0xC054 */ nullptr,
    /* 0xC055 */ nullptr,
    /* 0xC056 */ nullptr,
    /* 0xC057 */ nullptr,
    /* 0xC058 */ nullptr,
    /* 0xC059 */ nullptr,
    /* 0xC05A */ nullptr,
    /* 0xC05B */ nullptr,
    /* 0xC05C */ nullptr,
    /* 0xC05D */ nullptr,
    /* 0xC05E */ nullptr,
    /* 0xC05F */ nullptr,
    /* 0xC060 */ nullptr,
    /* 0xC061 */ nullptr,
    /* 0xC062 */ nullptr,
    /* 0xC063 */ nullptr,
    /* 0xC064 */ nullptr,
    /* 0xC065 */ nullptr,
    /* 0xC066 */ nullptr,
    /* 0xC067 */ nullptr,
    /* 0xC068 */ nullptr,
    /* 0xC069 */ nullptr,
    /* 0xC06A */ nullptr,
    /* 0xC06B */ nullptr,
    /* 0xC06C */ nullptr,
    /* 0xC06D */ nullptr,
    /* 0xC06E */ nullptr,
    /* 0xC06F */ nullptr,
    /* 0xC070 */ nullptr,
    /* 0xC071 */ nullptr,
    /* 0xC072 */ nullptr,
    /* 0xC073 */ nullptr,
    /* 0xC074 */ nullptr,
    /* 0xC075 */ nullptr,
    /* 0xC076 */ nullptr,
    /* 0xC077 */ nullptr,
    /* 0xC078 */ nullptr,
    /* 0xC079 */ nullptr,
    /* 0xC07A */ nullptr,
    /* 0xC07B */ nullptr,
    /* 0xC07C */ nullptr,
    /* 0xC07D */ nullptr,
    /* 0xC07E */ nullptr,
    /* 0xC07F */ nullptr,
};

memory_write_handler C0xx_memory_write_handlers[] = {
    /* 0xC000 */ nullptr,
    /* 0xC001 */ nullptr,
    /* 0xC002 */ nullptr,
    /* 0xC003 */ nullptr,
    /* 0xC004 */ nullptr,
    /* 0xC005 */ nullptr,
    /* 0xC006 */ nullptr,
    /* 0xC007 */ nullptr,
    /* 0xC008 */ nullptr,
    /* 0xC009 */ nullptr,
    /* 0xC00A */ nullptr,
    /* 0xC00B */ nullptr,
    /* 0xC00C */ nullptr,
    /* 0xC00D */ nullptr,
    /* 0xC00E */ nullptr,
    /* 0xC00F */ nullptr,
    /* 0xC010 */ nullptr,
    /* 0xC011 */ nullptr,
    /* 0xC012 */ nullptr,
    /* 0xC013 */ nullptr,
    /* 0xC014 */ nullptr,
    /* 0xC015 */ nullptr,
    /* 0xC016 */ nullptr,
    /* 0xC017 */ nullptr,
    /* 0xC018 */ nullptr,
    /* 0xC019 */ nullptr,
    /* 0xC01A */ nullptr,
    /* 0xC01B */ nullptr,
    /* 0xC01C */ nullptr,
    /* 0xC01D */ nullptr,
    /* 0xC01E */ nullptr,
    /* 0xC01F */ nullptr,
    /* 0xC020 */ nullptr,
    /* 0xC021 */ nullptr,
    /* 0xC022 */ nullptr,
    /* 0xC023 */ nullptr,
    /* 0xC024 */ nullptr,
    /* 0xC025 */ nullptr,
    /* 0xC026 */ nullptr,
    /* 0xC027 */ nullptr,
    /* 0xC028 */ nullptr,
    /* 0xC029 */ nullptr,
    /* 0xC02A */ nullptr,
    /* 0xC02B */ nullptr,
    /* 0xC02C */ nullptr,
    /* 0xC02D */ nullptr,
    /* 0xC02E */ nullptr,
    /* 0xC02F */ nullptr,
    /* 0xC030 */ nullptr,
    /* 0xC031 */ nullptr,
    /* 0xC032 */ nullptr,
    /* 0xC033 */ nullptr,
    /* 0xC034 */ nullptr,
    /* 0xC035 */ nullptr,
    /* 0xC036 */ nullptr,
    /* 0xC037 */ nullptr,
    /* 0xC038 */ nullptr,
    /* 0xC039 */ nullptr,
    /* 0xC03A */ nullptr,
    /* 0xC03B */ nullptr,
    /* 0xC03C */ nullptr,
    /* 0xC03D */ nullptr,
    /* 0xC03E */ nullptr,
    /* 0xC03F */ nullptr,
    /* 0xC040 */ nullptr,
    /* 0xC041 */ nullptr,
    /* 0xC042 */ nullptr,
    /* 0xC043 */ nullptr,
    /* 0xC044 */ nullptr,
    /* 0xC045 */ nullptr,
    /* 0xC046 */ nullptr,
    /* 0xC047 */ nullptr,
    /* 0xC048 */ nullptr,
    /* 0xC049 */ nullptr,
    /* 0xC04A */ nullptr,
    /* 0xC04B */ nullptr,
    /* 0xC04C */ nullptr,
    /* 0xC04D */ nullptr,
    /* 0xC04E */ nullptr,
    /* 0xC04F */ nullptr,
    /* 0xC050 */ nullptr,
    /* 0xC051 */ nullptr,
    /* 0xC052 */ nullptr,
    /* 0xC053 */ nullptr,
    /* 0xC054 */ nullptr,
    /* 0xC055 */ nullptr,
    /* 0xC056 */ nullptr,
    /* 0xC057 */ nullptr,
    /* 0xC058 */ nullptr,
    /* 0xC059 */ nullptr,
    /* 0xC05A */ nullptr,
    /* 0xC05B */ nullptr,
    /* 0xC05C */ nullptr,
    /* 0xC05D */ nullptr,
    /* 0xC05E */ nullptr,
    /* 0xC05F */ nullptr,
    /* 0xC060 */ nullptr,
    /* 0xC061 */ nullptr,
    /* 0xC062 */ nullptr,
    /* 0xC063 */ nullptr,
    /* 0xC064 */ nullptr,
    /* 0xC065 */ nullptr,
    /* 0xC066 */ nullptr,
    /* 0xC067 */ nullptr,
    /* 0xC068 */ nullptr,
    /* 0xC069 */ nullptr,
    /* 0xC06A */ nullptr,
    /* 0xC06B */ nullptr,
    /* 0xC06C */ nullptr,
    /* 0xC06D */ nullptr,
    /* 0xC06E */ nullptr,
    /* 0xC06F */ nullptr,
    /* 0xC070 */ nullptr,
    /* 0xC071 */ nullptr,
    /* 0xC072 */ nullptr,
    /* 0xC073 */ nullptr,
    /* 0xC074 */ nullptr,
    /* 0xC075 */ nullptr,
    /* 0xC076 */ nullptr,
    /* 0xC077 */ nullptr,
    /* 0xC078 */ nullptr,
    /* 0xC079 */ nullptr,
    /* 0xC07A */ nullptr,
    /* 0xC07B */ nullptr,
    /* 0xC07C */ nullptr,
    /* 0xC07D */ nullptr,
    /* 0xC07E */ nullptr,
    /* 0xC07F */ nullptr,
};

void register_C0xx_memory_read_handler(uint16_t address, memory_read_handler handler) {
    C0xx_memory_read_handlers[address - 0xC000] = handler;
}

void register_C0xx_memory_write_handler(uint16_t address, memory_write_handler handler) {
    C0xx_memory_write_handlers[address - 0xC000] = handler;
}

uint8_t memory_bus_read(cpu_state *cpu, uint16_t address) {
    if (address >= 0xC000 && address <= 0xC07F) {
        memory_read_handler funcptr =  C0xx_memory_read_handlers[address - 0xC000];
        if (funcptr != nullptr) {
            return (*funcptr)(cpu, address);
        } else return 0xEE;
    }
    return 0xEE; /* TODO: should return a random value 'floating bus'*/
}

void memory_bus_write(cpu_state *cpu, uint16_t address, uint8_t value) {
    if (address >= 0x0400 && address <= 0x0BFF) {
        txt_memory_write(address, value);
    }
    if (address >= 0x2000 && address <= 0x5FFF) {
        hgr_memory_write(address, value);
    }
    if (address >= 0xC000 && address <= 0xC07F) {
        memory_write_handler funcptr =  C0xx_memory_write_handlers[address - 0xC000];
        if (funcptr != nullptr) {
             (*funcptr)(cpu, address, value);
        } else return;
    }
}
